{
    "intents": [
        {
            "tag": "greeting",
            "patterns": [
                "Hi",
                "How are you",
                "Is anyone there?",
                "Hello",
                "Good day"
            ],
            "responses": [
                "Hello, thanks for visiting",
                "Good to see you again",
                "Hi there, how can I help?"
            ],
            "context_set": ""
        },
        {
            "tag": "goodbye",
            "patterns": [
                "Bye",
                "See you later",
                "Goodbye"
            ],
            "responses": [
                "See you later, thanks for visiting",
                "Have a nice day",
                "Bye! Come back again soon."
            ]
        },
        {
            "tag": "noanswer",
            "patterns": [
                "some regex"
            ],
            "responses": [
                "sorry",
                "try again",
                "could not understand"
            ]
        },
        {
            "tag": "options",
            "patterns": [
                "what can you do",
                "show me options",
                "help me"
            ],
            "responses": [
                "definitions",
                "syntaxes",
                "examples",
                "codes"
            ]
        },
        {
            "tag": "int",
            "patterns": [
                "what is int",
                "integer in python",
                "integer"
            ],
            "responses": [
                "The int() method returns an integer object from any number or string"
            ]
        },
        {
            "tag": "intSyntax",
            "patterns": [
                "what is the syntax of int",
                "syntax for integer in python",
                "integer syntax",
                "what is the syntax of integer"
            ],
            "responses": [
                "int(x, base)"
            ]
        },
        {
            "tag": "float",
            "patterns": [
                "what is float",
                "float",
                "decimal",
                "float in python"
            ],
            "responses": [
                "The float() method returns a floating point number from a number or a string"
            ]
        },
        {
            "tag": "floatSyntax",
            "patterns": [
                "what is the syntax for float",
                "syntax for float in python",
                "float syntax",
                "what is the syntax of float"
            ],
            "responses": [
                "float([x])"
            ]
        },
        {
            "tag": "string",
            "patterns": [
                "what is string",
                "string in python",
                "string datatype"
            ],
            "responses": [
                "A string in Python is a sequence of characters. It is a derived data type. Strings are immutable. This means that once defined, they cannot be changed"
            ]
        },
        {
            "tag": "stringSyntax",
            "patterns": [
                "what is the syntax of string",
                "syntax for sting in python",
                "string syntax",
                "what is the syntax of string"
            ],
            "responses": [
                "my_string = 'Hello'"
            ]
        },
        {
            "tag": "return",
            "patterns": [
                "what is return",
                "return in python",
                "return"
            ],
            "responses": [
                "The return statement is used to exit a function and go back to the place from where it was called"
            ]
        },
        {
            "tag": "returnSyntax",
            "patterns": [
                "what is the syntax for return",
                "syntax for return in python",
                "return syntax",
                "what is the syntax of return"
            ],
            "responses": [
                "def fun(): \n\t statement \n\treturn [expression]"
            ]
        },
        {
            "tag": "tuple",
            "patterns": [
                "what is tuple",
                "tuple in python",
                "tuple"
            ],
            "responses": [
                "The tuple() builtin can be used to create tuples in Python"
            ]
        },
        {
            "tag": "tupleSyntax",
            "patterns": [
                "what is the syntax for tuple",
                "syntax for tuple in python",
                "tuple syntax",
                "what is the syntax of tuple"
            ],
            "responses": [
                "tuple(iterable)"
            ]
        },
        {
            "tag": "complex",
            "patterns": [
                "complex is tuple",
                "complex in python",
                "complex"
            ],
            "responses": [
                "The complex() method returns a complex number when real and imaginary parts are provided, or it converts a string to a complex number"
            ]
        },
        {
            "tag": "complexSyntax",
            "patterns": [
                "what is the syntax for complex",
                "syntax for complex in python",
                "complex syntax",
                "what is the syntax of complex"
            ],
            "responses": [
                "complex([real[, imag]])"
            ]
        },
        {
            "tag": "compile",
            "patterns": [
                "what is compile",
                "compile in python",
                "compile"
            ],
            "responses": [
                "The compile() method returns a Python code object from the source (normal string, a byte string, or an AST object)"
            ]
        },
        {
            "tag": "compileSyntax",
            "patterns": [
                "what is the syntax for compile",
                "syntax for compile in python",
                "compile syntax",
                "what is the syntax of compile"
            ],
            "responses": [
                "compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)"
            ]
        },
        {
            "tag": "if",
            "patterns": [
                "what is if",
                "if in python",
                "if"
            ],
            "responses": [
                " the program evaluates the test expression and will execute statement(s) only if the test expression is True, If the test expression is False, the statement(s) is not executed"
            ]
        },
        {
            "tag": "ifSyntax",
            "patterns": [
                "what is the syntax for if",
                "syntax for if in python",
                "if syntax",
                "what is the syntax of if"
            ],
            "responses": [
                "if test expression:\n\tstatement(s)"
            ]
        },
        {
            "tag": "if else",
            "patterns": [
                "what is if else",
                "if else in python",
                "if else"
            ],
            "responses": [
                " the program evaluates the test expression and will execute statement(s) only if the test expression is True, If the condition is False, the body of else is executed. Indentation is used to separate the blocks "
            ]
        },
        {
            "tag": "ifSyntax",
            "patterns": [
                "what is the syntax for if",
                "syntax for if in python",
                "if syntax",
                "what is the syntax of if"
            ],
            "responses": [
                "if test expression:\n\tBody of if\nelse:\n\tBody of else"
            ]
        },
        {
            "tag": "if elif else",
            "patterns": [
                "what is if elif else",
                "if elif else in python",
                "if elif else"
            ],
            "responses": [
                "If the condition for if is False, it checks the condition of the next elif block and so on, If all the conditions are False, the body of else is executed, Only one block among the several if...elif...else blocks is executed according to the condition, The if block can have only one else block. But it can have multiple elif blocks "
            ]
        },
        {
            "tag": "if elif elseSyntax",
            "patterns": [
                "what is the syntax for if elif else",
                "syntax for if elif else in python",
                "if elif else syntax",
                "what is the syntax of if elif else"
            ],
            "responses": [
                "if test expression:\n\tBody of if\nelif test expression:\n\tBody of elif\nelse:\n\tBody of else"
            ]
        },
        {
            "tag": "for",
            "patterns": [
                "what is for",
                "for in python",
                "for"
            ],
            "responses": [
                "The for loop in Python is used to iterate over a sequence (list, tuple, string) or other iterable objects. Iterating over a sequence is called traversal"
            ]
        },
        {
            "tag": "forSyntax",
            "patterns": [
                "what is the syntax for for",
                "syntax for for in python",
                "for syntax",
                "what is the syntax of for"
            ],
            "responses": [
                "for val in sequence:\n\tBody of for"
            ]
        },
        {
            "tag": "while",
            "patterns": [
                "what is while",
                "while in python",
                "while"
            ],
            "responses": [
                "The while loop in Python is used to iterate over a block of code as long as the test expression (condition) is true"
            ]
        },
        {
            "tag": "whileSyntax ",
            "patterns": [
                "what is the syntax for while",
                "syntax for while in python",
                "while syntax",
                "what is the syntax of while"
            ],
            "responses": [
                "while test_expression:\n\tBody of while"
            ]
        },
        {
            "tag": "break",
            "patterns": [
                "what is break",
                "break in python",
                "break"
            ],
            "responses": [
                "The break statement terminates the loop containing it. Control of the program flows to the statement immediately after the body of the loop"
            ]
        },
        {
            "tag": "breakSyntax",
            "patterns": [
                "what is the syntax for break",
                "syntax for break in python",
                "break syntax",
                "what is the syntax of break"
            ],
            "responses": [
                "break"
            ]
        },
        {
            "tag": "continue",
            "patterns": [
                "what is continue",
                "continue in python",
                "continue"
            ],
            "responses": [
                "The continue statement is used to skip the rest of the code inside a loop for the current iteration only. Loop does not terminate but continues on with the next iteration"
            ]
        },
        {
            "tag": "continueSyntax",
            "patterns": [
                "what is the syntax for continue",
                "syntax for continue in python",
                "continue syntax",
                "what is the syntax of continue"
            ],
            "responses": [
                "continue"
            ]
        },
        {
            "tag": "pass",
            "patterns": [
                "what is pass",
                "pass in python",
                "pass"
            ],
            "responses": [
                "In Python programming, the pass statement is a null statement. The difference between a comment and a pass statement in Python is that while the interpreter ignores a comment entirely, pass is not ignored"
            ]
        },
        {
            "tag": "passSyntax",
            "patterns": [
                "what is the syntax for pass",
                "syntax for pass in python",
                "pass syntax",
                "what is the syntax of pass"
            ],
            "responses": [
                "pass"
            ]
        },
        {
            "tag": "range",
            "patterns": [
                "what is range",
                "range in python",
                " range"
            ],
            "responses": [
                "The range() type returns an immutable sequence of numbers between the given start integer to the stop integer"
            ]
        },
        {
            "tag": "rangeSyntax",
            "patterns": [
                "what is the syntax for range",
                "syntax for range in python",
                "range syntax",
                "what is the syntax of range"
            ],
            "responses": [
                "range(stop)",
                "range(start, stop[, step])"
            ]
        },
        {
            "tag": "function ",
            "patterns": [
                "what is function",
                "function in python",
                "function"
            ],
            "responses": [
                "n Python, a function is a group of related statements that performs a specific task",
                "Functions help break our program into smaller and modular chunks. As our program grows larger and larger, functions make it more organized and manageable"
            ]
        },
        {
            "tag": "functionSyntax",
            "patterns": [
                "what is the syntax for function",
                "syntax for function in python",
                "function syntax",
                "what is the syntax of function"
            ],
            "responses": [
                "def function_name(parameters):\n\tstatement(s)"
            ]
        },
        {
            "tag": "args",
            "patterns": [
                "what is args",
                "args in python",
                "args"
            ],
            "responses": [
                "The special syntax *args in function definitions in python is used to pass a variable number of arguments to a function. It is used to pass a non-key worded, variable-length argument list"
            ]
        },
        {
            "tag": "argsSyntax",
            "patterns": [
                "what is the syntax for args",
                "syntax for args in python",
                "args syntax",
                "what is the syntax of args"
            ],
            "responses": [
                "*args"
            ]
        },
        {
            "tag": "kwargs",
            "patterns": [
                "what is kwargs",
                "kwargs in python",
                "kwargs"
            ],
            "responses": [
                "The special syntax **kwargs in function definitions in python is used to pass a keyworded, variable-length argument list. We use the name kwargs with the double star"
            ]
        },
        {
            "tag": "kwargsSyntax",
            "patterns": [
                "what is the syntax for kwargs",
                "syntax for kwargs in python",
                "kwargs syntax",
                "what is the syntax of kwargs"
            ],
            "responses": [
                "**kwargs"
            ]
        },
        {
            "tag": "lambda",
            "patterns": [
                "what is lambda",
                "lambda in python",
                "lambda"
            ],
            "responses": [
                "A lambda function can take any number of arguments, but can only have one expression"
            ]
        },
        {
            "tag": "lambdaSyntax",
            "patterns": [
                "what is the syntax for lambda",
                "syntax for lambda in python",
                "lambda syntax",
                "what is the syntax of lambda"
            ],
            "responses": [
                "lambda arguments: expression"
            ]
        },
        {
            "tag": "filter",
            "patterns": [
                "what is filter",
                "filter in python",
                "filter"
            ],
            "responses": [
                "The filter() method constructs an iterator from elements of an iterable for which a function returns true"
            ]
        },
        {
            "tag": "filterSyntax",
            "patterns": [
                "what is the syntax for filter",
                "syntax for filter in python",
                "filter syntax",
                "what is the syntax of filter"
            ],
            "responses": [
                "filter(function, iterable)"
            ]
        },
        {
            "tag": "upper",
            "patterns": [
                "what is upper",
                "upper in python",
                "upper"
            ],
            "responses": [
                "Converts a string into upper case"
            ]
        },
        {
            "tag": "upperSyntax",
            "patterns": [
                "what is the syntax for upper",
                "syntax for upper in python",
                "upper syntax",
                "what is the syntax of upper"
            ],
            "responses": [
                "string.upper()"
            ]
        },
        {
            "tag": "print",
            "patterns": [
                "what is print",
                "print in python",
                "print"
            ],
            "responses": [
                "The print() function prints the given object to the standard output device (screen) or to the text stream file"
            ]
        },
        {
            "tag": "printSyntax",
            "patterns": [
                "what is the syntax for print",
                "syntax for print in python",
                "print syntax",
                "what is the syntax of print"
            ],
            "responses": [
                "print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)"
            ]
        },
        {
            "tag": "map",
            "patterns": [
                "what is map",
                "map in python",
                "map"
            ],
            "responses": [
                "The map() function applies a given function to each item of an iterable (list, tuple etc.) and returns a list of the results"
            ]
        },
        {
            "tag": "mapSyntax",
            "patterns": [
                "what is the syntax for map",
                "syntax for map in python",
                "map syntax",
                "what is the syntax of map"
            ],
            "responses": [
                ""
            ]
        },
        {
            "tag": "abs",
            "patterns": [
                "what is abs",
                "abs in python",
                "abs"
            ],
            "responses": [
                "The abs() method returns the absolute value of the given number. If the number is a complex number, abs() returns its magnitude"
            ]
        },
        {
            "tag": "absSyntax",
            "patterns": [
                "what is the syntax for abs",
                "syntax for abs in python",
                "abs syntax",
                "what is the syntax of abs"
            ],
            "responses": [
                "abs(x)"
            ]
        },
        {
            "tag": "round",
            "patterns": [
                "what is round",
                "round in python",
                "round"
            ],
            "responses": [
                "The round() function returns a floating point number that is a rounded version of the specified number, with the specified number of decimals"
            ]
        },
        {
            "tag": "roundSyntax",
            "patterns": [
                "what is the syntax for round",
                "syntax for round in python",
                "round syntax",
                "what is the syntax of round"
            ],
            "responses": [
                "round(number, digits) "
            ]
        },
        {
            "tag": "min",
            "patterns": [
                "what is min",
                "min in python",
                "min"
            ],
            "responses": [
                "The Python min() function returns the smallest item in an iterable. It can also be used to find the smallest item between two or more parameters"
            ]
        },
        {
            "tag": "minSyntax",
            "patterns": [
                "what is the syntax for min",
                "syntax for min in python",
                "min syntax",
                "what is the syntax of min"
            ],
            "responses": [
                "min(iterable, *[, key, default])",
                " min(arg1, arg2, *args[, key])"
            ]
        },
        {
            "tag": "max",
            "patterns": [
                "what is max",
                "max in python",
                "max"
            ],
            "responses": [
                "The Python max() function returns the largest item in an iterable. It can also be used to find the largest item between two or more parameters"
            ]
        },
        {
            "tag": "maxSyntax",
            "patterns": [
                "what is the syntax for max",
                "syntax for max in python",
                "max syntax",
                "what is the syntax of max"
            ],
            "responses": [
                "max(iterable)"
            ]
        },
        {
            "tag": "sorted",
            "patterns": [
                "what is sorted",
                "sorted in python",
                "sorted"
            ],
            "responses": [
                "The sorted() function returns a sorted list from the items in an iterable"
            ]
        },
        {
            "tag": "sortedSyntax",
            "patterns": [
                "what is the syntax for sorted",
                "syntax for sorted in python",
                "sorted syntax",
                "what is the syntax of sorted"
            ],
            "responses": [
                "sorted(iterable, *, key=None, reverse=False)"
            ]
        },
        {
            "tag": "lower",
            "patterns": [
                "what is lower",
                "lower in python",
                "lower"
            ],
            "responses": [
                "Converts a string into lower case"
            ]
        },
        {
            "tag": "lowerSyntax",
            "patterns": [
                "what is the syntax for lower",
                "syntax for lower in python",
                "lower syntax",
                "what is the syntax of lower"
            ],
            "responses": [
                "string.lower()"
            ]
        },
        {
            "tag": "sum",
            "patterns": [
                "what is sum",
                "sum in python",
                "sum"
            ],
            "responses": [
                "The sum() function adds the items of an iterable and returns the sum"
            ]
        },
        {
            "tag": "sumSyntax",
            "patterns": [
                "what is the syntax for ",
                "syntax for  in python",
                " syntax",
                "what is the syntax of "
            ],
            "responses": [
                "sum(iterable, /, start=0)"
            ]
        },
        {
            "tag": "type",
            "patterns": [
                "what is type",
                "type in python",
                "type"
            ],
            "responses": [
                "The type() function either returns the type of the object or returns a new type object based on the arguments passed"
            ]
        },
        {
            "tag": "typeSyntax",
            "patterns": [
                "what is the syntax for type",
                "syntax for type in python",
                "type syntax",
                "what is the syntax of type"
            ],
            "responses": [
                "type(name, bases, dict)",
                "type(object)"
            ]
        },
        {
            "tag": "append",
            "patterns": [
                "what is append",
                "append in python",
                "append"
            ],
            "responses": [
                "Adds an element at the end of the list"
            ]
        },
        {
            "tag": "appendSyntax",
            "patterns": [
                "what is the syntax for append",
                "syntax for append in python",
                "append syntax",
                "what is the syntax of append"
            ],
            "responses": [
                "list.append(elmnt)"
            ]
        },
        {
            "tag": "lstrip",
            "patterns": [
                "what is lstrip",
                "lstrip in python",
                "lstrip"
            ],
            "responses": [
                "Returns a left trim version of the string"
            ]
        },
        {
            "tag": "lstripSyntax",
            "patterns": [
                "what is the syntax for lstrip",
                "syntax for lstrip in python",
                "lstrip syntax",
                "what is the syntax of lstrip"
            ],
            "responses": [
                "string.lstrip(characters)"
            ]
        },
        {
            "tag": "replace",
            "patterns": [
                "what is replace",
                "replace in python",
                "replace"
            ],
            "responses": [
                "The replace() method replaces a specified phrase with another specified phrase"
            ]
        },
        {
            "tag": "replaceSyntax",
            "patterns": [
                "what is the syntax for replace",
                "syntax for replace in python",
                "replace syntax",
                "what is the syntax of replace"
            ],
            "responses": [
                "string.replace(oldvalue, newvalue, count)"
            ]
        },
        {
            "tag": "split",
            "patterns": [
                "what is split",
                "split in python",
                "split"
            ],
            "responses": [
                "The split() method breaks up a string at the specified separator and returns a list of strings"
            ]
        },
        {
            "tag": "splitSyntax",
            "patterns": [
                "what is the syntax for split",
                "syntax for split in python",
                "split syntax",
                "what is the syntax of split"
            ],
            "responses": [
                "string.split(separator, maxsplit)"
            ]
        },
        {
            "tag": "join",
            "patterns": [
                "what is join",
                "join in python",
                "join"
            ],
            "responses": [
                "The join() string method returns a string by joining all the elements of an iterable, separated by a string separator"
            ]
        },
        {
            "tag": "joinSyntax",
            "patterns": [
                "what is the syntax for join",
                "syntax for join in python",
                "join syntax",
                "what is the syntax of "
            ],
            "responses": [
                "string.join(iterable)"
            ]
        },
        {
            "tag": "remove",
            "patterns": [
                "what is remove",
                "remove in python",
                "remove"
            ],
            "responses": [
                "The remove() method removes the first matching element (which is passed as an argument) from the list"
            ]
        },
        {
            "tag": "removeSyntax",
            "patterns": [
                "what is the syntax for remove",
                "syntax for remove in python",
                "remove syntax",
                "what is the syntax of remove"
            ],
            "responses": [
                "list.remove(elmnt)"
            ]
        },
        {
            "tag": "count",
            "patterns": [
                "what is count",
                "count in python",
                "count"
            ],
            "responses": [
                "The string count() method returns the number of occurrences of a substring in the given string"
            ]
        },
        {
            "tag": "countSyntax",
            "patterns": [
                "what is the syntax for count",
                "syntax for count in python",
                "count syntax",
                "what is the syntax of count"
            ],
            "responses": [
                "list.count(value) "
            ]
        },
        {
            "tag": "clear",
            "patterns": [
                "what is clear",
                "clear in python",
                "clear"
            ],
            "responses": [
                "Removes all the elements from the list"
            ]
        },
        {
            "tag": "clearSyntax",
            "patterns": [
                "what is the syntax for clear",
                "syntax for clear in python",
                "clear syntax",
                "what is the syntax of clear"
            ],
            "responses": [
                "dictionary.clear()"
            ]
        },
        {
            "tag": "keys",
            "patterns": [
                "what is keys",
                "keys in python",
                "keys"
            ],
            "responses": [
                "The keys() method returns a view object. The view object contains the keys of the dictionary, as a list. The view object will reflect any changes done to the dictionary"
            ]
        },
        {
            "tag": "keysSyntax",
            "patterns": [
                "what is the syntax for keys",
                "syntax for keys in python",
                "keys syntax",
                "what is the syntax of keys"
            ],
            "responses": [
                "dictionary.keys()"
            ]
        },
        {
            "tag": "values",
            "patterns": [
                "what is values",
                "values in python",
                "values"
            ],
            "responses": [
                "The values() method returns a view object that displays a list of all the values in the dictionary"
            ]
        },
        {
            "tag": "valuesSyntax",
            "patterns": [
                "what is the syntax for ",
                "syntax for  in python",
                " syntax",
                "what is the syntax of "
            ],
            "responses": [
                "dictionary.values() "
            ]
        },
        {
            "tag": "str",
            "patterns": [
                "what is str",
                "str in python",
                "str"
            ],
            "responses": [
                "The setattr() function sets the value of the attribute of an object"
            ]
        },
        {
            "tag": "strSyntax",
            "patterns": [
                "what is the syntax for str",
                "syntax for str in python",
                "str syntax",
                "what is the syntax of str"
            ],
            "responses": [
                "str(object, encoding=encoding, errors=errors)"
            ]
        },
        {
            "tag": "all",
            "patterns": [
                "what is the what is all",
                "all in python",
                "all"
            ],
            "responses": [
                "The all() method returns True when all elements in the given iterable are true. If not, it returns False"
            ]
        },
        {
            "tag": "allSyntax",
            "patterns": [
                "what is the syntax for all",
                "syntax for all in python",
                "all syntax",
                "what is the syntax of all"
            ],
            "responses": [
                "all(iterable)"
            ]
        },
        {
            "tag": "any",
            "patterns": [
                "what is any",
                "any in python",
                "any"
            ],
            "responses": [
                "The any() function returns True if any element of an iterable is True. If not, any() returns False"
            ]
        },
        {
            "tag": "anySyntax",
            "patterns": [
                "what is the syntax for any",
                "syntax for any in python",
                "any syntax",
                "what is the syntax of any"
            ],
            "responses": [
                "any(iterable)"
            ]
        },
        {
            "tag": "ascii",
            "patterns": [
                "what is ascii",
                "ascii in python",
                "ascii"
            ],
            "responses": [
                "The ascii method returns a string containing a printable representation of an object. It escapes the non-ASCII characters in the string using \\x,\\u or\\U escapes"
            ]
        },
        {
            "tag": "asciiSyntax",
            "patterns": [
                "what is the syntax for ascii",
                "syntax for ascii in python",
                "ascii syntax",
                "what is the syntax of ascii"
            ],
            "responses": [
                "ascii(object)"
            ]
        },
        {
            "tag": "bin",
            "patterns": [
                "what is bin",
                "bin in python",
                "bin"
            ],
            "responses": [
                "Convert an integer number to a binary string prefixed with “0b”. The result is a valid Python expression. If x is not a Python int object, it has to define an _index_() method that returns an integer"
            ]
        },
        {
            "tag": "binSyntax",
            "patterns": [
                "syntax for bin",
                "syntax for bin in python",
                "bin syntax",
                "what is the syntax of bin"
            ],
            "responses": [
                "bin(x)"
            ]
        },
        {
            "tag": "bool",
            "patterns": [
                "what is bool",
                "bool in python",
                "bool"
            ],
            "responses": [
                "The bool() method converts a value to Boolean (True or False) using the standard truth testing procedure"
            ]
        },
        {
            "tag": "boolSyntax",
            "patterns": [
                "syntax for bool",
                "syntax for bool in python",
                "bool syntax",
                "what is the syntax of bool"
            ],
            "responses": [
                "bool([x])"
            ]
        },
        {
            "tag": "bytearray",
            "patterns": [
                "what is bytearray",
                "bytearray in python",
                "bytearray"
            ],
            "responses": [
                "Return a new array of bytes. The bytearray class is a mutable sequence of integers in the range 0 <= x < 256. It has most of the usual methods of mutable sequences, described in Mutable Sequence Types, as well as most methods that the bytes type has, see Bytes and Bytearray Operations."
            ]
        },
        {
            "tag": "bytearraySyntax",
            "patterns": [
                "syntax for bytearray",
                "syntax for bytearray in python",
                "bytearray syntax",
                "what is the syntax of bytearray"
            ],
            "responses": [
                "bytes([source[, encoding[, errors]]])"
            ]
        },
        {
            "tag": "bytes",
            "patterns": [
                "what is bytes",
                "bytes in python",
                "bytes"
            ],
            "responses": [
                "Return a new “bytes” object, which is an immutable sequence of integers in the range 0 <= x < 256. bytes is an immutable version of bytearray – it has the same non-mutating methods and the same indexing and slicing behavior"
            ]
        },
        {
            "tag": "bytesSyntax",
            "patterns": [
                "syntax for bytes",
                "syntax for bytes in python",
                "bytes syntax",
                "what is the syntax of bytes"
            ],
            "responses": [
                "bytes([source[, encoding[, errors]]])"
            ]
        },
        {
            "tag": "callable",
            "patterns": [
                "what is callable in python?",
                "callable in python",
                "python callable"
            ],
            "responses": [
                "Return True if the object argument appears callable, False if not. If this returns True, it is still possible that a call fails, but if it is False, calling object will never succeed"
            ]
        },
        {
            "tag": "callableSyntax",
            "patterns": [
                "syntax for callable",
                "syntax for callable in python",
                "callable syntax",
                "what is the syntax of callable"
            ],
            "responses": [
                "callable(object)"
            ]
        },
        {
            "tag": "chr",
            "patterns": [
                "what is chr in python?",
                "chr in python",
                "python chr"
            ],
            "responses": [
                "Return the string representing a character whose Unicode code point is the integer i. For example, chr(97) returns the string 'a', while chr(8364) returns the string '€' "
            ]
        },
        {
            "tag": "chrSyntax",
            "patterns": [
                "syntax for chr",
                "syntax for chr in python",
                "chr syntax",
                "what is the syntax of chr"
            ],
            "responses": [
                "chr(i)"
            ]
        },
        {
            "tag": "classmethod",
            "patterns": [
                "what is ",
                " in python",
                ""
            ],
            "responses": [
                "The classmethod() method returns a class method for the given function"
            ]
        },
        {
            "tag": "classmethodSyntax",
            "patterns": [
                "syntax for classmethod",
                "syntax for classmethod in python",
                "classmethod syntax",
                "what is the syntax of classmethod"
            ],
            "responses": [
                "@classmethod"
            ]
        },
        {
            "tag": "delattr",
            "patterns": [
                "what is ",
                " in python",
                ""
            ],
            "responses": [
                "This is a relative of setattr(). The arguments are an object and a string. The string must be the name of one of the object’s attributes. The function deletes the named attribute, provided the object allows it. For example, delattr(x, 'foobar') is equivalent to del x.foobar"
            ]
        },
        {
            "tag": "delattrSyntax",
            "patterns": [
                "syntax for delattr",
                "syntax for delattr in python",
                "delattr syntax",
                "what is the syntax of delattr"
            ],
            "responses": [
                "delattr(object, name)"
            ]
        },
        {
            "tag": "dict",
            "patterns": [
                "what is ",
                " in python",
                ""
            ],
            "responses": [
                "The dict() constructor creates a dictionary in Python"
            ]
        },
        {
            "tag": "dictSyntax",
            "patterns": [
                "syntax for dict",
                "syntax for dict in python",
                "dict syntax",
                "what is the syntax of dict"
            ],
            "responses": [
                ""
            ]
        },
        {
            "tag": "dir",
            "patterns": [
                "what is ",
                " in python",
                ""
            ],
            "responses": [
                "The dir() method tries to return a list of valid attributes of the object"
            ]
        },
        {
            "tag": "dirSyntax",
            "patterns": [
                "syntax for dir",
                "syntax for dir in python",
                "dir syntax",
                "what is the syntax of dir"
            ],
            "responses": [
                "dir([object])"
            ]
        },
        {
            "tag": "divmod",
            "patterns": [
                "what is divmod",
                "divmod in python",
                "divmod"
            ],
            "responses": [
                "The divmod() method takes two numbers and returns a pair of numbers (a tuple) consisting of their quotient and remainder"
            ]
        },
        {
            "tag": "divmodSyntax",
            "patterns": [
                "syntax for divmod",
                "syntax for divmod in python",
                "divmod syntax",
                "what is the syntax of divmod"
            ],
            "responses": [
                "divmod(a, b)"
            ]
        },
        {
            "tag": "enumerate",
            "patterns": [
                "what is enumerate",
                "enumerate in python",
                "enumerate"
            ],
            "responses": [
                "The enumerate() method adds counter to an iterable and returns it (the enumerate object)"
            ]
        },
        {
            "tag": "enumerateSyntax",
            "patterns": [
                "syntax for enumerate",
                "syntax for enumerate in python",
                "enumerate syntax",
                "what is the syntax of enumerate"
            ],
            "responses": [
                "enumerate(iterable, start=0)"
            ]
        },
        {
            "tag": "eval",
            "patterns": [
                "what is eval",
                "eval in python",
                "eval"
            ],
            "responses": [
                "The eval() method parses the expression passed to this method and runs python expression (code) within the program"
            ]
        },
        {
            "tag": "evalSyntax",
            "patterns": [
                "syntax for ",
                "syntax for  in python",
                " syntax",
                "what is the syntax of "
            ],
            "responses": [
                "eval(expression[, globals[, locals]])"
            ]
        },
        {
            "tag": "exec",
            "patterns": [
                "what is exec",
                "exec in python",
                "exec"
            ],
            "responses": [
                "The exec() method executes the dynamically created program, which is either a string or a code object"
            ]
        },
        {
            "tag": "execSyntax",
            "patterns": [
                "syntax for ",
                "syntax for  in python",
                " syntax",
                "what is the syntax of "
            ],
            "responses": [
                "exec(object[, globals[, locals]])"
            ]
        },
        {
            "tag": "filter",
            "patterns": [
                "what is filter",
                "filter in python",
                "filter"
            ],
            "responses": [
                "The filter() method filters the given sequence with the help of a function that tests each element in the sequence to be true or not"
            ]
        },
        {
            "tag": "filterSyntax",
            "patterns": [
                "syntax for ",
                "syntax for  in python",
                " syntax",
                "what is the syntax of "
            ],
            "responses": [
                "filter(function, iterable)"
            ]
        },
        {
            "tag": "format",
            "patterns": [
                "what is format",
                "format in python",
                "format"
            ],
            "responses": [
                "The built-in format() method returns a formatted representation of the given value controlled by the format specifier"
            ]
        },
        {
            "tag": "formatSyntax",
            "patterns": [
                "syntax for ",
                "syntax for  in python",
                " syntax",
                "what is the syntax of "
            ],
            "responses": [
                "format(value[, format_spec])"
            ]
        },
        {
            "tag": "frozenset",
            "patterns": [
                "what is frozenset",
                "frozenset in python",
                "frozenset"
            ],
            "responses": [
                "The frozenset() function returns an immutable frozenset object initialized with elements from the given iterable"
            ]
        },
        {
            "tag": "frozensetSyntax",
            "patterns": [
                "syntax for ",
                "syntax for  in python",
                " syntax",
                "what is the syntax of "
            ],
            "responses": [
                "frozenset([iterable])"
            ]
        },
        {
            "tag": "getattr",
            "patterns": [
                "what is getattr",
                "getattr in python",
                "getattr"
            ],
            "responses": [
                "The getattr() method returns the value of the named attribute of an object. If not found, it returns the default value provided to the function"
            ]
        },
        {
            "tag": "getattrSyntax",
            "patterns": [
                "syntax for ",
                "syntax for  in python",
                " syntax",
                "what is the syntax of "
            ],
            "responses": [
                "getattr(object, name[, default])"
            ]
        },
        {
            "tag": "globals",
            "patterns": [
                "what is globals",
                "globals in python",
                "globals"
            ],
            "responses": [
                "The globals() method returns the dictionary of the current global symbol table"
            ]
        },
        {
            "tag": "globalsSyntax",
            "patterns": [
                "syntax for ",
                "syntax for  in python",
                " syntax",
                "what is the syntax of "
            ],
            "responses": [
                "globals()"
            ]
        },
        {
            "tag": "hasattr",
            "patterns": [
                "what is hasattr",
                "hasattr in python",
                "hasattr"
            ],
            "responses": [
                "The hasattr() method returns true if an object has the given named attribute and false if it does not"
            ]
        },
        {
            "tag": "hasattrSyntax",
            "patterns": [
                "syntax for ",
                "syntax for  in python",
                " syntax",
                "what is the syntax of "
            ],
            "responses": [
                "hasattr(object, name)"
            ]
        },
        {
            "tag": "hash",
            "patterns": [
                "what is hash",
                "hash in python",
                "hash"
            ],
            "responses": [
                "The hash() method returns the hash value of an object if it has one"
            ]
        },
        {
            "tag": "hashSyntax",
            "patterns": [
                "syntax for ",
                "syntax for  in python",
                " syntax",
                "what is the syntax of "
            ],
            "responses": [
                "hash(object)"
            ]
        },
        {
            "tag": "help",
            "patterns": [
                "what is help",
                "help in python",
                "help"
            ],
            "responses": [
                "The help() method calls the built-in Python help system"
            ]
        },
        {
            "tag": "helpSyntax",
            "patterns": [
                "syntax for ",
                "syntax for  in python",
                " syntax",
                "what is the syntax of "
            ],
            "responses": [
                "help([object])"
            ]
        },
        {
            "tag": "hex",
            "patterns": [
                "what is hex",
                "hex in python",
                "hex"
            ],
            "responses": [
                "The hex() function converts an integer number to the corresponding hexadecimal string"
            ]
        },
        {
            "tag": "hexSyntax",
            "patterns": [
                "syntax for ",
                "syntax for  in python",
                " syntax",
                "what is the syntax of "
            ],
            "responses": [
                "hex(x)"
            ]
        },
        {
            "tag": "id",
            "patterns": [
                "what is id",
                "id in python",
                "id"
            ],
            "responses": [
                "The id() function returns identity (unique integer) of an object"
            ]
        },
        {
            "tag": "idSyntax",
            "patterns": [
                "syntax for id",
                "syntax for id in python",
                "id syntax",
                "what is the syntax of id"
            ],
            "responses": [
                "id(object)"
            ]
        },
        {
            "tag": "input",
            "patterns": [
                "what is input",
                "input in python",
                "input"
            ],
            "responses": [
                "The input() method reads a line from input, converts into a string and returns it"
            ]
        },
        {
            "tag": "inputSyntax",
            "patterns": [
                "syntax for input",
                "syntax for input in python",
                "input syntax",
                "what is the syntax of input"
            ],
            "responses": [
                "input([prompt])"
            ]
        },
        {
            "tag": "isinstance",
            "patterns": [
                "what is isinstance",
                "isinstance in python",
                "isinstance"
            ],
            "responses": [
                "The isinstance() function checks if the object (first argument) is an instance or subclass of classinfo class (second argument)"
            ]
        },
        {
            "tag": "isinstanceSyntax",
            "patterns": [
                "syntax for isinstance",
                "syntax for isinstance in python",
                "isinstance syntax",
                "what is the syntax of isinstance"
            ],
            "responses": [
                "isinstance(object, classinfo)"
            ]
        },
        {
            "tag": "issubclass",
            "patterns": [
                "what is issubclass",
                "issubclass in python",
                "issubclass"
            ],
            "responses": [
                "The issubclass() function checks if the class argument (first argument) is a subclass of classinfo class (second argument)"
            ]
        },
        {
            "tag": "issubclassSyntax",
            "patterns": [
                "syntax for issubclass",
                "syntax for issubclass in python",
                "issubclass syntax",
                "what is the syntax of issubclass"
            ],
            "responses": [
                "issubclass(class, classinfo)"
            ]
        },
        {
            "tag": "iter",
            "patterns": [
                "what is iter",
                "iter in python",
                "iter"
            ],
            "responses": [
                "The Python iter() function returns an iterator for the given object"
            ]
        },
        {
            "tag": "iterSyntax",
            "patterns": [
                "syntax for iter",
                "syntax for iter in python",
                "iter syntax",
                "what is the syntax of iter"
            ],
            "responses": [
                "iter(object[, sentinel])"
            ]
        },
        {
            "tag": "list",
            "patterns": [
                "what is list",
                "list in python",
                "list"
            ],
            "responses": [
                "The list() constructor returns a list in Python"
            ]
        },
        {
            "tag": "listSyntax",
            "patterns": [
                "syntax for list",
                "syntax for list in python",
                "list syntax",
                "what is the syntax of list"
            ],
            "responses": [
                " class list([iterable])"
            ]
        },
        {
            "tag": "memoryview",
            "patterns": [
                "what is memoryview()",
                "memoryview() in python",
                "memoryview()"
            ],
            "responses": [
                "The memoryview() function returns a memory view object of the given argument"
            ]
        },
        {
            "tag": "memoryviewSyntax",
            "patterns": [
                "syntax for memoryview",
                "syntax for memoryview in python",
                "memoryview syntax",
                "what is the syntax of memoryview"
            ],
            "responses": [
                "memoryview(obj)"
            ]
        },
        {
            "tag": "next",
            "patterns": [
                "what is next",
                "next in python",
                "next"
            ],
            "responses": [
                "The next() function returns the next item from the iterator"
            ]
        },
        {
            "tag": "nextSyntax",
            "patterns": [
                "syntax for next",
                "syntax for next in python",
                "next syntax",
                "what is the syntax of next"
            ],
            "responses": [
                "next(iterator[, default])"
            ]
        },
        {
            "tag": "locals",
            "patterns": [
                "what is locals",
                "locals in python",
                "locals"
            ],
            "responses": [
                "The locals() method updates and returns a dictionary of the current local symbol table"
            ]
        },
        {
            "tag": "localsSyntax",
            "patterns": [
                "syntax for locals",
                "syntax for locals in python",
                "locals syntax",
                "what is the syntax of locals"
            ],
            "responses": [
                "locals()"
            ]
        },
        {
            "tag": "object",
            "patterns": [
                "what is object",
                "object in python",
                "object"
            ],
            "responses": [
                "The object() function returns a featureless object which is a base for all classes"
            ]
        },
        {
            "tag": "objectSyntax",
            "patterns": [
                "syntax for object",
                "syntax for object in python",
                "object syntax",
                "what is the syntax of object"
            ],
            "responses": [
                "o = object()"
            ]
        },
        {
            "tag": "len",
            "patterns": [
                "what is len",
                "len in python",
                "len"
            ],
            "responses": [
                "The len() function returns the number of items (length) in an object"
            ]
        },
        {
            "tag": "lenSyntax",
            "patterns": [
                "syntax for len",
                "syntax for len in python",
                "len syntax",
                "what is the syntax of len"
            ],
            "responses": [
                "len(s)"
            ]
        },
        {
            "tag": "oct",
            "patterns": [
                "what is oct",
                "oct in python",
                "oct"
            ],
            "responses": [
                "The oct() function takes an integer number and returns its octal representation"
            ]
        },
        {
            "tag": "octSyntax",
            "patterns": [
                "syntax for oct",
                "syntax for oct in python",
                "oct syntax",
                "what is the syntax of oct"
            ],
            "responses": [
                "oct(x)"
            ]
        },
        {
            "tag": "open",
            "patterns": [
                "what is open",
                "open in python",
                "open"
            ],
            "responses": [
                "The open() function opens the file (if possible) and returns the corresponding file object"
            ]
        },
        {
            "tag": "openSyntax",
            "patterns": [
                "syntax for open",
                "syntax for open in python",
                "open syntax",
                "what is the syntax of open"
            ],
            "responses": [
                "open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)"
            ]
        },
        {
            "tag": "ord",
            "patterns": [
                "what is ord",
                "ord in python",
                "ord"
            ],
            "responses": [
                "The ord() function returns an integer representing the Unicode character"
            ]
        },
        {
            "tag": "ordSyntax",
            "patterns": [
                "syntax for ord",
                "syntax for ord in python",
                "ord syntax",
                "what is the syntax of ord"
            ],
            "responses": [
                "ord(c)"
            ]
        },
        {
            "tag": "pow",
            "patterns": [
                "what is pow",
                "pow in python",
                "pow"
            ],
            "responses": [
                "The pow() function returns the power of a number"
            ]
        },
        {
            "tag": "powSyntax",
            "patterns": [
                "syntax for pow",
                "syntax for pow in python",
                "pow syntax",
                "what is the syntax of pow"
            ],
            "responses": [
                "pow(x, y)"
            ]
        },
        {
            "tag": "property",
            "patterns": [
                "what is property",
                "property in python",
                "property"
            ],
            "responses": [
                "The property() construct returns the property attribute"
            ]
        },
        {
            "tag": "propertySyntax",
            "patterns": [
                "syntax for property",
                "syntax for property in python",
                "property syntax",
                "what is the syntax of property"
            ],
            "responses": [
                "property(fget=None, fset=None, fdel=None, doc=None)"
            ]
        },
        {
            "tag": "repr",
            "patterns": [
                "what is repr",
                "repr in python",
                "repr"
            ],
            "responses": [
                "The repr() function returns a printable representation of the given object"
            ]
        },
        {
            "tag": "reprSyntax",
            "patterns": [
                "syntax for repr",
                "syntax for repr in python",
                "repr syntax",
                "what is the syntax of repr"
            ],
            "responses": [
                "repr(object)"
            ]
        },
        {
            "tag": "reserved",
            "patterns": [
                "what is reserved",
                "reserved in python",
                "reserved"
            ],
            "responses": [
                "The reversed() function returns the reversed iterator of the given sequence"
            ]
        },
        {
            "tag": "reservedSyntax",
            "patterns": [
                "syntax for reserved",
                "syntax for reserved in python",
                "reserved syntax",
                "what is the syntax of reserved"
            ],
            "responses": [
                "reversed(seq)"
            ]
        },
        {
            "tag": "round",
            "patterns": [
                "what is round",
                "round in python",
                "round"
            ],
            "responses": [
                "The round() function returns a floating-point number rounded to the specified number of decimals"
            ]
        },
        {
            "tag": "roundSyntax",
            "patterns": [
                "syntax for round",
                "syntax for round in python",
                "round syntax",
                "what is the syntax of round"
            ],
            "responses": [
                "round(number[, ndigits])"
            ]
        },
        {
            "tag": "set",
            "patterns": [
                "what is set",
                "set in python",
                "set"
            ],
            "responses": [
                "The set() builtin creates a set in Python"
            ]
        },
        {
            "tag": "setSyntax",
            "patterns": [
                "syntax for set",
                "syntax for set in python",
                "set syntax",
                "what is the syntax of set"
            ],
            "responses": [
                "set([iterable])"
            ]
        },
        {
            "tag": "setattr",
            "patterns": [
                "what is setattr",
                "setattr in python",
                "setattr"
            ],
            "responses": [
                "The setattr() function sets the value of the attribute of an object"
            ]
        },
        {
            "tag": "setattrSyntax",
            "patterns": [
                "syntax for setattr",
                "syntax for setattr in python",
                "setattr syntax",
                "what is the syntax of setattr"
            ],
            "responses": [
                "setattr(object, name, value)"
            ]
        },
        {
            "tag": "slice",
            "patterns": [
                "what is slice",
                "slice in python",
                "slice"
            ],
            "responses": [
                "The slice() function returns a slice object that can use used to slice strings, lists, tuple etc"
            ]
        },
        {
            "tag": "sliceSyntax",
            "patterns": [
                "syntax for slice",
                "syntax for slice in python",
                "slice syntax",
                "what is the syntax of slice"
            ],
            "responses": [
                "slice(start, stop[, step])",
                "slice(stop)"
            ]
        },
        {
            "tag": "staticmethod",
            "patterns": [
                "what is staticmethod",
                "staticmethod in python",
                "staticmethod"
            ],
            "responses": [
                "The staticmethod() built-in function returns a static method for a given function"
            ]
        },
        {
            "tag": "staticmethodSyntax",
            "patterns": [
                "syntax for staticmethod",
                "syntax for staticmethod in python",
                "staticmethod syntax",
                "what is the syntax of staticmethod"
            ],
            "responses": [
                "@staticmethod"
            ]
        },
        {
            "tag": "super",
            "patterns": [
                "what is super",
                "super in python",
                "super"
            ],
            "responses": [
                "The super() builtin returns a proxy object (temporary object of the superclass) that allows us to access methods of the base class"
            ]
        },
        {
            "tag": "superSyntax",
            "patterns": [
                "syntax for super",
                "syntax for super in python",
                "super syntax",
                "what is the syntax of super"
            ],
            "responses": [
                "super([type[, object-or-type]])"
            ]
        },
        {
            "tag": "vars",
            "patterns": [
                "what is vars",
                "vars in python",
                "vars"
            ],
            "responses": [
                "The vars() function returns the _dict_ attribute of the given object"
            ]
        },
        {
            "tag": "varsSyntax",
            "patterns": [
                "syntax for vars",
                "syntax for vars in python",
                "vars syntax",
                "what is the syntax of vars"
            ],
            "responses": [
                "vars([object])"
            ]
        },
        {
            "tag": "zip",
            "patterns": [
                "what is zip",
                "zip in python",
                "zip"
            ],
            "responses": [
                "The zip() function takes iterables (can be zero or more), aggregates them in a tuple, and return it"
            ]
        },
        {
            "tag": "zipSyntax",
            "patterns": [
                "syntax for zip",
                "syntax for zip in python",
                "zip syntax",
                "what is the syntax of zip"
            ],
            "responses": [
                "zip(*iterables)"
            ]
        },
        {
            "tag": "capitalize",
            "patterns": [
                "what is capitalize",
                "capitalize in python",
                "capitalize"
            ],
            "responses": [
                "the capitalize() method returns a copy of the original string and converts the first character of the string to a capital (uppercase) letter while making all other characters in the string lowercase letters"
            ]
        },
        {
            "tag": "capitalizeSyntax",
            "patterns": [
                "syntax for capitalize",
                "syntax for capitalize in python",
                "capitalize syntax",
                "what is the syntax of capitalize"
            ],
            "responses": [
                "string.capitalize()"
            ]
        },
        {
            "tag": "casefold",
            "patterns": [
                "what is casefold",
                "casefold in python",
                "casefold"
            ],
            "responses": [
                "The casefold() string method is used to implement caseless string matching. It is similar to lower() string method but case removes all the case distinctions present in a string. i.e ignore cases when comparing"
            ]
        },
        {
            "tag": "casefoldSyntax",
            "patterns": [
                "syntax for casefold",
                "syntax for casefold in python",
                "casefold syntax",
                "what is the syntax of casefold"
            ],
            "responses": [
                "string.casefold()"
            ]
        },
        {
            "tag": "center",
            "patterns": [
                "what is center",
                "center in python",
                "center"
            ],
            "responses": [
                "The center() method will center align the string, using a specified character (space is default) as the fill character"
            ]
        },
        {
            "tag": "centerSyntax",
            "patterns": [
                "syntax for center",
                "syntax for center in python",
                "center syntax",
                "what is the syntax of center"
            ],
            "responses": [
                "string.center(width[, fillchar])"
            ]
        },
        {
            "tag": "encode",
            "patterns": [
                "what is encode",
                "encode in python",
                "encode"
            ],
            "responses": [
                "The encode() method encodes the string, using the specified encoding. If no encoding is specified, UTF-8 will be used"
            ]
        },
        {
            "tag": "encodeSyntax",
            "patterns": [
                "syntax for encode",
                "syntax for encode in python",
                "encode syntax",
                "what is the syntax of encode"
            ],
            "responses": [
                "string.encode(encoding='UTF-8',errors='strict')"
            ]
        },
        {
            "tag": "endswith",
            "patterns": [
                "what is endswith",
                "endswith in python",
                "endswith"
            ],
            "responses": [
                "Returns true if the string ends with the specified value"
            ]
        },
        {
            "tag": "endswithSyntax",
            "patterns": [
                "syntax for endswith",
                "syntax for endswith in python",
                "endswith syntax",
                "what is the syntax of endswith"
            ],
            "responses": [
                "string.endswith(value, start, end)"
            ]
        },
        {
            "tag": "expandtabs",
            "patterns": [
                "what is expandtabs",
                "expandtabs in python",
                "expandtabs"
            ],
            "responses": [
                "Sets the tab size of the string"
            ]
        },
        {
            "tag": "expandtabsSyntax",
            "patterns": [
                "syntax for expandtabs",
                "syntax for expandtabs in python",
                "expandtabs syntax",
                "what is the syntax of expandtabs"
            ],
            "responses": [
                "list.sort(reverse=True|False, key=myFunc)"
            ]
        },
        {
            "tag": "find",
            "patterns": [
                "what is find",
                "find in python",
                "find"
            ],
            "responses": [
                "The find() method returns the index of first occurrence of the substring (if found). If not found, it returns -1"
            ]
        },
        {
            "tag": "findSyntax",
            "patterns": [
                "syntax for find",
                "syntax for find in python",
                "find syntax",
                "what is the syntax of find"
            ],
            "responses": [
                "str.find(sub[, start[, end]] )"
            ]
        },
        {
            "tag": "format",
            "patterns": [
                "what is format",
                "format in python",
                "format"
            ],
            "responses": [
                "The built-in format() method returns a formatted representation of the given value controlled by the format specifier"
            ]
        },
        {
            "tag": "formatSyntax",
            "patterns": [
                "syntax for format",
                "syntax for format in python",
                "format syntax",
                "what is the syntax of format"
            ],
            "responses": [
                "format(value[, format_spec])"
            ]
        },
        {
            "tag": "formatmap",
            "patterns": [
                "what is formatmap",
                "formatmap in python",
                "formatmap"
            ],
            "responses": [
                "Formats specified values in a string"
            ]
        },
        {
            "tag": "formatmapSyntax",
            "patterns": [
                "syntax for formatmap",
                "syntax for formatmap in python",
                "formatmap syntax",
                "what is the syntax of formatmap"
            ],
            "responses": [
                "str.format_map(mapping)"
            ]
        },
        {
            "tag": "index",
            "patterns": [
                "what is index",
                "index in python",
                "index"
            ],
            "responses": [
                "Searches the string for a specified value and returns the position of where it was found"
            ]
        },
        {
            "tag": "indexSyntax",
            "patterns": [
                "syntax for index",
                "syntax for index in python",
                "index syntax",
                "what is the syntax of index"
            ],
            "responses": [
                "string.index(value, start, end)"
            ]
        },
        {
            "tag": "isalpha",
            "patterns": [
                "what is isalpha",
                "isalpha in python",
                "isalpha"
            ],
            "responses": [
                "Returns True if all characters in the string are in the alphabet"
            ]
        },
        {
            "tag": "isalphaSyntax",
            "patterns": [
                "syntax for isalpha",
                "syntax for isalpha in python",
                "isalpha syntax",
                "what is the syntax of isalpha"
            ],
            "responses": [
                "string.isalpha()"
            ]
        },
        {
            "tag": "import",
            "patterns": [
                "what is import",
                "import in python",
                "import"
            ],
            "responses": [
                "The _import_() is a function that is called by the import statement"
            ]
        },
        {
            "tag": "importSyntax",
            "patterns": [
                "syntax for import",
                "syntax for import in python",
                "import syntax",
                "what is the syntax of import"
            ],
            "responses": [
                "_import_(name, globals=None, locals=None, fromlist=(), level=0)"
            ]
        },
        {
            "tag": "isdecimal",
            "patterns": [
                "what is isdecimal",
                "isdecimal in python",
                "isdecimal"
            ],
            "responses": [
                "Returns True if all characters in the string are decimals"
            ]
        },
        {
            "tag": "isdecimalSyntax",
            "patterns": [
                "syntax for isdecimal",
                "syntax for isdecimal in python",
                "isdecimal syntax",
                "what is the syntax of isdecimal"
            ],
            "responses": [
                "string.isdecimal()"
            ]
        },
        {
            "tag": "isalnum",
            "patterns": [
                "what is isalnum",
                "isalnum in python",
                "isalnum"
            ],
            "responses": [
                "Returns True if all characters in the string are alphanumeric"
            ]
        },
        {
            "tag": "isalnumSyntax",
            "patterns": [
                "syntax for isalnum",
                "syntax for isalnum in python",
                "isalnum syntax",
                "what is the syntax of isalnum"
            ],
            "responses": [
                "string.isalnum()"
            ]
        },
        {
            "tag": "isdigit",
            "patterns": [
                "what is isdigit",
                "isdigit in python",
                "isdigit"
            ],
            "responses": [
                "Returns True if all characters in the string are digits"
            ]
        },
        {
            "tag": "isdigitSyntax",
            "patterns": [
                "syntax for isdigit",
                "syntax for isdigit in python",
                "isdigit syntax",
                "what is the syntax of isdigit"
            ],
            "responses": [
                "string.isdigit()"
            ]
        },
        {
            "tag": "isidentifier",
            "patterns": [
                "what is isidentifier",
                "isidentifier in python",
                "isidentifier"
            ],
            "responses": [
                "Returns True if the string is an identifier"
            ]
        },
        {
            "tag": "isidentifierSyntax",
            "patterns": [
                "syntax for isidentifier",
                "syntax for isidentifier in python",
                "isidentifier syntax",
                "what is the syntax of isidentifier"
            ],
            "responses": [
                "string.isidentifier()"
            ]
        },
        {
            "tag": "islower",
            "patterns": [
                "what is islower",
                "islower in python",
                "islower"
            ],
            "responses": [
                "Returns True if all characters in the string are lower case"
            ]
        },
        {
            "tag": "islowerSyntax",
            "patterns": [
                "syntax for islower",
                "syntax for islower in python",
                "islower syntax",
                "what is the syntax of islower"
            ],
            "responses": [
                "string.islower()"
            ]
        },
        {
            "tag": "isnumeric",
            "patterns": [
                "what is isnumeric",
                "isnumeric in python",
                "isnumeric"
            ],
            "responses": [
                "Returns True if all characters in the string are numeric"
            ]
        },
        {
            "tag": "isnumericSyntax",
            "patterns": [
                "syntax for isnumeric",
                "syntax for isnumeric in python",
                "isnumeric syntax",
                "what is the syntax of "
            ],
            "responses": [
                "string.isnumeric()"
            ]
        },
        {
            "tag": "isprintable",
            "patterns": [
                "what is isprintable",
                "isprintable in python",
                "isprintable"
            ],
            "responses": [
                "Returns True if all characters in the string are printable"
            ]
        },
        {
            "tag": "isprintableSyntax",
            "patterns": [
                "syntax for ",
                "syntax for  in python",
                " syntax",
                "what is the syntax of "
            ],
            "responses": [
                "string.isprintable()"
            ]
        },
        {
            "tag": "isspace",
            "patterns": [
                "what is isspace",
                "isspace in python",
                "isspace"
            ],
            "responses": [
                "Returns True if all characters in the string are whitespaces"
            ]
        },
        {
            "tag": "isspaceSyntax",
            "patterns": [
                "syntax for ",
                "syntax for  in python",
                " syntax",
                "what is the syntax of "
            ],
            "responses": [
                "string.isspace()"
            ]
        },
        {
            "tag": "istitle",
            "patterns": [
                "what is istitle",
                "istitle in python",
                "istitle"
            ],
            "responses": [
                "Returns True if the string follows the rules of a title"
            ]
        },
        {
            "tag": "istitleSyntax",
            "patterns": [
                "syntax for istitle",
                "syntax for istitle in python",
                "istitle syntax",
                "what is the syntax of istitle"
            ],
            "responses": [
                "string.istitle()"
            ]
        },
        {
            "tag": "isupper",
            "patterns": [
                "what is isupper",
                "isupper in python",
                "isupper"
            ],
            "responses": [
                "Returns True if all characters in the string are upper case"
            ]
        },
        {
            "tag": "isupperSyntax",
            "patterns": [
                "syntax for isupper",
                "syntax for isupper in python",
                "isupper syntax",
                "what is the syntax of isupper"
            ],
            "responses": [
                "string.isupper()"
            ]
        },
        {
            "tag": "join",
            "patterns": [
                "what is join",
                "join in python",
                "join"
            ],
            "responses": [
                "Joins the elements of an iterable to the end of the string"
            ]
        },
        {
            "tag": "joinSyntax",
            "patterns": [
                "syntax for join",
                "syntax for join in python",
                "join syntax",
                "what is the syntax of join"
            ],
            "responses": [
                "string.join(iterable)"
            ]
        },
        {
            "tag": "ljust",
            "patterns": [
                "what is ljust",
                "ljust in python",
                "ljust"
            ],
            "responses": [
                "Returns a left justified version of the string"
            ]
        },
        {
            "tag": "ljustSyntax",
            "patterns": [
                "syntax for ljust",
                "syntax for ljust in python",
                "ljust syntax",
                "what is the syntax of ljust"
            ],
            "responses": [
                "string.ljust(width[, fillchar])"
            ]
        },
        {
            "tag": "strip",
            "patterns": [
                "what is strip",
                "strip in python",
                "strip"
            ],
            "responses": [
                "The strip() method removes any leading (spaces at the beginning) and trailing (spaces at the end) characters (space is the default leading character to remove)"
            ]
        },
        {
            "tag": "stripSyntax",
            "patterns": [
                "syntax for strip",
                "syntax for strip in python",
                "strip syntax",
                "what is the syntax of strip"
            ],
            "responses": [
                "string.strip([chars])"
            ]
        },
        {
            "tag": "maketrans",
            "patterns": [
                "what is maketrans",
                "maketrans in python",
                "maketrans"
            ],
            "responses": [
                "Returns a translation table to be used in translations"
            ]
        },
        {
            "tag": "maketransSyntax",
            "patterns": [
                "syntax for maketrans",
                "syntax for maketrans in python",
                "maketrans syntax",
                "what is the syntax of maketrans"
            ],
            "responses": [
                "string.maketrans(x[, y[, z]])"
            ]
        },
        {
            "tag": "partition",
            "patterns": [
                "what is partition",
                "partition in python",
                "partition"
            ],
            "responses": [
                "Returns a tuple where the string is parted into three parts"
            ]
        },
        {
            "tag": "partitionSyntax",
            "patterns": [
                "syntax for partition",
                "syntax for partition in python",
                "partition syntax",
                "what is the syntax of partition"
            ],
            "responses": [
                "string.partition(separator)"
            ]
        },
        {
            "tag": "rindex",
            "patterns": [
                "what is rindex",
                "rindex in python",
                "rindex"
            ],
            "responses": [
                "Searches the string for a specified value and returns the last position of where it was found"
            ]
        },
        {
            "tag": "rindexSyntax",
            "patterns": [
                "syntax for rindex",
                "syntax for rindex in python",
                "rindex syntax",
                "what is the syntax of rindex"
            ],
            "responses": [
                "str.rindex(sub[, start[, end]] )"
            ]
        },
        {
            "tag": "rjust",
            "patterns": [
                "what is rjust",
                "rjust in python",
                "rjust"
            ],
            "responses": [
                "Returns a right justified version of the string"
            ]
        },
        {
            "tag": "rjustSyntax",
            "patterns": [
                "syntax for rjust",
                "syntax for rjust in python",
                "rjust syntax",
                "what is the syntax of rjust"
            ],
            "responses": [
                "string.rjust(width[, fillchar])"
            ]
        },
        {
            "tag": "rpartition",
            "patterns": [
                "what is rpartition",
                "rpartition in python",
                "rpartition"
            ],
            "responses": [
                "Returns a tuple where the string is parted into three parts"
            ]
        },
        {
            "tag": "rpartitionSyntax",
            "patterns": [
                "syntax for rpartition",
                "syntax for rpartition in python",
                "rpartition syntax",
                "what is the syntax of rpartition"
            ],
            "responses": [
                "string.rpartition(separator)"
            ]
        },
        {
            "tag": "rsplit",
            "patterns": [
                "what is rsplit",
                "rsplit in python",
                "rsplit"
            ],
            "responses": [
                "Splits the string at the specified separator, and returns a list"
            ]
        },
        {
            "tag": "rsplitSyntax",
            "patterns": [
                "syntax for rsplit",
                "syntax for rsplit in python",
                "rsplit syntax",
                "what is the syntax of rsplit"
            ],
            "responses": [
                "str.rsplit([separator [, maxsplit]])"
            ]
        },
        {
            "tag": "rstrip",
            "patterns": [
                "what is rstrip",
                "rstrip in python",
                "rstrip"
            ],
            "responses": [
                "Returns a right trim version of the string"
            ]
        },
        {
            "tag": "rstripSyntax",
            "patterns": [
                "syntax for rstrip",
                "syntax for rstrip in python",
                "rstrip syntax",
                "what is the syntax of rstrip"
            ],
            "responses": [
                "string.rstrip([chars])"
            ]
        },
        {
            "tag": "split",
            "patterns": [
                "what is split",
                "split in python",
                "split"
            ],
            "responses": [
                "Splits the string at the specified separator, and returns a list"
            ]
        },
        {
            "tag": "splitSyntax",
            "patterns": [
                "syntax for split",
                "syntax for split in python",
                "split syntax",
                "split",
                "what is the syntax of split"
            ],
            "responses": [
                "str.split([separator [, maxsplit]])"
            ]
        },
        {
            "tag": "splitlines",
            "patterns": [
                "what is splitlines",
                "splitlines in python",
                "splitlines"
            ],
            "responses": [
                "The splitlines() method splits a string into a list, The splitting is done at line breaks"
            ]
        },
        {
            "tag": "splitnessSyntax",
            "patterns": [
                "syntax for splitness",
                "syntax for splitness in python",
                "splitness syntax",
                "what is the syntax of splitness"
            ],
            "responses": [
                "str.splitlines( num = string.count('\n'))"
            ]
        },
        {
            "tag": "swapcase",
            "patterns": [
                "what is swapcase",
                "swapcase in python",
                "swapcase"
            ],
            "responses": [
                "The swapcase() method returns a string where all the upper case letters are lower case and vice versa"
            ]
        },
        {
            "tag": "swapcaseSyntax",
            "patterns": [
                "syntax for swapcase",
                "syntax for swapcase in python",
                "swapcase syntax",
                "what is the syntax of swapcase"
            ],
            "responses": [
                "str.swapcase()"
            ]
        },
        {
            "tag": "title",
            "patterns": [
                "what is title",
                "title in python",
                "title"
            ],
            "responses": [
                "The title() function in python is the Python String Method which is used to convert the first character in each word to Uppercase and remaining characters to Lowercase in the string and returns a new string"
            ]
        },
        {
            "tag": "titleSyntax",
            "patterns": [
                "syntax for title",
                "syntax for title in python",
                "title syntax",
                "what is the syntax of title"
            ],
            "responses": [
                "string.title()"
            ]
        },
        {
            "tag": "translate",
            "patterns": [
                "what is translate",
                "translate in python",
                "translate"
            ],
            "responses": [
                "Returns a translated string"
            ]
        },
        {
            "tag": "translateSyntax",
            "patterns": [
                "syntax for translate",
                "syntax for translate in python",
                "translate syntax",
                "what is the syntax of translate",
                "what is the syntax of translate"
            ],
            "responses": [
                "string.translate(table) "
            ]
        },
        {
            "tag": "zfill",
            "patterns": [
                "what is zfill",
                "zfill in python",
                "zfill"
            ],
            "responses": [
                "Fills the string with a specified number of 0 values at the beginning"
            ]
        },
        {
            "tag": "zfillSyntax",
            "patterns": [
                "syntax for zfill",
                "syntax for zfill in python",
                "zfill syntax",
                "what is the syntax of zfill"
            ],
            "responses": [
                "string.zfill(len) "
            ]
        },
        {
            "tag": "copy",
            "patterns": [
                "what is copy",
                "copy in python",
                "copy"
            ],
            "responses": [
                "Returns a copy of the list"
            ]
        },
        {
            "tag": "copySyntax",
            "patterns": [
                "syntax for copy",
                "syntax for copy in python",
                "copy syntax",
                "what is the syntax of copy"
            ],
            "responses": [
                "list.copy() "
            ]
        },
        {
            "tag": "extend",
            "patterns": [
                "what is extend",
                "extend in python",
                "extend"
            ],
            "responses": [
                "Add the elements of a list (or any iterable), to the end of the current list"
            ]
        },
        {
            "tag": "extendSyntax",
            "patterns": [
                "syntax for extend",
                "syntax for extend in python",
                "extend syntax",
                "what is the syntax of extend"
            ],
            "responses": [
                "list.extend(iterable)"
            ]
        },
        {
            "tag": "insert",
            "patterns": [
                "what is insert",
                "insert in python",
                "insert"
            ],
            "responses": [
                "Adds an element at the specified position"
            ]
        },
        {
            "tag": "insertSyntax",
            "patterns": [
                "syntax for insert",
                "syntax for insert in python",
                "insert syntax",
                "what is the syntax of insert"
            ],
            "responses": [
                "list.insert(pos, elmnt)"
            ]
        },
        {
            "tag": "pop",
            "patterns": [
                "what is pop",
                "pop in python",
                "pop"
            ],
            "responses": [
                "Removes the element at the specified position"
            ]
        },
        {
            "tag": "popSyntax",
            "patterns": [
                "syntax for pop",
                "syntax for pop in python",
                "pop syntax",
                "what is the syntax of pop"
            ],
            "responses": [
                "list.pop(pos)"
            ]
        },
        {
            "tag": "reverse",
            "patterns": [
                "what is reverse",
                "reverse in python",
                "reverse"
            ],
            "responses": [
                "Removes the first item with the specified value"
            ]
        },
        {
            "tag": "reverseSyntax",
            "patterns": [
                "syntax for reverse",
                "syntax for reverse in python",
                "reverse syntax",
                "what is the syntax of reverse"
            ],
            "responses": [
                "list.reverse()"
            ]
        },
        {
            "tag": "sort",
            "patterns": [
                "what is sort",
                "sort in python",
                "sort"
            ],
            "responses": [
                "Sorts the list"
            ]
        },
        {
            "tag": "sortSyntax",
            "patterns": [
                "syntax for sort",
                "syntax for sort in python",
                "sort syntax",
                "what is the syntax of sort"
            ],
            "responses": [
                "list.sort(reverse=True|False, key=myFunc)"
            ]
        }
    ]
}